import OptionInstaller from"./OptionInstaller";import{Stream,Collectors}from"../libs/Stream";import{Invocation}from"../libs/Invocation";import{isPlainObject,isFunction,removeEmpty}from"../utils/common";export default class PropertiesInstaller extends OptionInstaller{_properties={};install(e,t,r){r=Object.assign.apply(void 0,[{},...e.installers.map(e=>e.properties()),r.props,r.properties]),r=Stream.of(Object.entries(r)).map(function([e,t]){if(t===Number)return[e,{type:Number,value:0}];if(t===String)return[e,{type:String,value:""}];if(t===Boolean)return[e,{type:Boolean,value:!1}];if(t===Array)return[e,{type:Array,value:[]}];if(t===Object)return[e,{type:Object,value:null}];if(null===t)return[e,{type:null,value:null}];if(isPlainObject(t))return[e,Object.assign({type:Array.isArray(t.type)?t.type[0]||null:t.type},removeEmpty({optionalTypes:Array.isArray(t.type)?[...t.type].concat(Array.isArray(t.optionalTypes)?t.optionalTypes:[]):Array.isArray(t.optionalTypes)?[...t.optionalTypes]:null,observer:isFunction(t.observer)||isFunction(t.validator)||!0===t.required?Invocation(t.observer,function(){const r=e.toString(),l=t.required,o=t.validator;return t.validator=function(e,t){!0!==l||null!=e&&""!==e?isFunction(o)&&(o.call(this,e,t)||console.warn(`${this.is}: custom validator failed for prop '${r}'`)):console.warn(`${this.is}: Missing required prop '${r}'`)},t.validator}()):null}),Object.hasOwnProperty.call(t,"value")?isFunction(t.value)?{default:t.value}:{value:t.value}:Object.hasOwnProperty.call(t,"default")?isFunction(t.default)?{default:t.default}:{value:t.default}:[Number,String,Boolean,Array].includes(t.type)?{value:t.type.call(void 0).valueOf()}:Object===t.type?{value:null}:null,t.validator?{validator:t.validator}:null)];throw new Error(`Bad type definition ${t&&(t.name||t.toString())} for ${t}`)}).collect(Collectors.toMap());t.set("properties",Object.assign(this._properties,r))}}