import OptionInstaller from"./OptionInstaller";import MethodsInstaller from"./MethodsInstaller";import PropertiesInstaller from"./PropertiesInstaller";import DataInstaller from"./DataInstaller";import StateInstaller from"./StateInstaller";import WatcherInstaller from"./WatcherInstaller";import ContextInstaller from"./ContextInstaller";import ComputedInstaller from"./ComputedInstaller";export default class MPExtender{_installers=[];_context=new Map;constructor(){this.use(new MethodsInstaller),this.use(new PropertiesInstaller),this.use(new DataInstaller),this.use(new StateInstaller),this.use(new WatcherInstaller),this.use(new ComputedInstaller),this.use(new ContextInstaller)}get installers(){return this._installers}use(t){t instanceof OptionInstaller&&this._installers.indexOf(t)<0&&this._installers.push(t)}extends(r){this._installers.forEach(t=>{t.install(this,this._context,r)});const e={behaviors:[Behavior({definitionFilter:(e,s)=>{this._installers.forEach(t=>{t.definitionFilter(this,this._context,r,e,s)})}})]};return this._installers.forEach(t=>{Object.assign(e,t.build(this,this._context,r))}),e}}