import OptionInstaller from"./OptionInstaller";import{Stream,Collectors}from"../libs/Stream";import{isFunction,isNullOrEmpty}from"../utils/common";import{Singleton}from"../libs/Singleton";export default class ContextInstaller extends OptionInstaller{definitionFilter(t,e,o,i,n){var{methods:r={}}=i;const l=e.get("computed"),s=new Singleton(t=>this.createRuntimeCompatibleContext(t));var a={created:function(){Object.entries(Stream.of(Object.entries(e.get("properties")||{})).filter(t=>!isNullOrEmpty(t[1])&&isFunction(t[1].validator)).collect(Collectors.toMap())).forEach(([t,e])=>{e.validator.call(s.get(this),s.get(this).data[t],void 0)})}};Object.keys(r).length&&Object.assign(i,{methods:Stream.of(Object.entries(i.methods)).map(([t,e])=>[t,isFunction(e)?function(){return e.apply(s.get(this),arguments)}:e]).collect(Collectors.toMap())}),l&&Object.keys(l).length&&Object.keys(l).forEach(t=>{const e=l[t];l[t]=isFunction(e)?function(){return e.apply(s.get(this),arguments)}:e}),i.behaviors=(i.behaviors||[]).concat([Behavior(a)])}}