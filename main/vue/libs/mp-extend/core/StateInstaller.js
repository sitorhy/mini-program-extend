import OptionInstaller from"./OptionInstaller";import{Stream,Collectors}from"../libs/Stream";import{isFunction,isPlainObject,isPrimitive,removeEmpty}from"../utils/common";import{Optional}from"../libs/Optional";export default class StateInstaller extends OptionInstaller{attemptToInstantiateProps(t,e,a,i){var o=e.get("properties")||{};const r={},s=Stream.of(Object.entries(o)).filter(([,t])=>isPlainObject(t)&&isFunction(t.default)).map(([t])=>t).collect(Collectors.toSet()),n=Stream.of(Object.entries(o)).filter(([,t])=>isPlainObject(t)&&!isFunction(t.default)||isFunction(t)||null===t).map(([t,e])=>{var a;return null===e?r[t]=null:isFunction(e)?r[t]=e:(a=removeEmpty({type:e.type,optionalTypes:e.optionalTypes,observer:e.observer}),r[t]=Object.assign(a,{value:e.value})),[t,e.value]}).collect(Collectors.toMap());Object.entries(o).forEach(([t,e])=>{if(isPrimitive(e))throw new Error(`The "${t}" property should be a constructor`)});let l=!0,p=!1;for(var c=this.createInitializationCompatibleContext(n,null,a,()=>{p=!0});l;){var m=s.size;p=!1;for(const d of s){const f=o[d];var b,u=f.default.call(c);n[d]=u,p||(s.delete(d),b=removeEmpty({type:f.type,optionalTypes:f.optionalTypes,observer:f.observer}),r[d]=Object.assign(b,{value:u}))}l=m!==s.size}return r}attemptToInstantiateData(t,e,a,i,o){const r=i.get("data")||{};i={};return isFunction(r)?(a=this.createInitializationCompatibleContext(null,e,a),Object.assign(i,r.call(a))):Object.assign(i,r),i}getValidatableProps(t){return Stream.of(Object.entries(t)).filter(([,t])=>isPlainObject(t)&&isFunction(t.validator)).map(([t,e])=>[t,e.validator]).collect(Collectors.toMap())}definitionFilter(t,e,a,i,o){var r=e.get("methods");const s=this.getValidatableProps(e.get("properties"));var n=this.attemptToInstantiateProps(t,e,r,a),a=this.attemptToInstantiateData(t,n,r,e,a);const l=this,p=new Set(Object.keys(n));Optional.of(Object.keys(a).find(t=>p.has(t))).ifPresent(t=>{throw new Error(`The data property "${t}" is already declared as a prop. Use prop default value instead.`)}),e.set("properties",n),e.set("data",a),Object.assign(i,{behaviors:(i.behaviors||[]).concat(Behavior({properties:Object.assign(i.properties||{},n),data:Object.assign(i.data||{},a),lifetimes:{created(){const a=l.createRuntimeCompatibleContext(this);Object.entries(s).forEach(([t,e])=>{e.call(a,this.data[t])})}}}))})}}