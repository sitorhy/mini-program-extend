import{isNull,isFunction}from"../utils/common";class Optional{constructor(i,t){this._value=i,this.isNull=isNull,t&&isFunction(t.isNull)&&(this.isNull=t.isNull),this.o=t}static of(i,t){return new Optional(i,t)}get(){if(this.isNull(this._value))throw new Error("optional is empty");return this._value}isPresent(){return!this.isNull(this._value)}ifPresent(i){if(!this.isNull(this._value)){if(!isFunction(i))throw new Error("consumer is not a function");i(this._value)}}filter(i){if(!isFunction(i))throw new Error("predicate is not a function");return!this.isNull(this._value)&&i(this._value)?Optional.of(this._value,this.o):Optional.of(void 0,this.o)}map(i){if(!isFunction(i))throw new Error("mapper is not a function");if(this.isNull(this._value))return Optional.of(void 0,this.o);i=i(this._value);return this.isNull(i)?Optional.of(void 0,this.o):Optional.of(i,this.o)}peek(i){if(!isFunction(i))throw new Error("peeker is not a function");return this.isNull(this._value)?Optional.of(void 0,this.o):(i(this._value),Optional.of(this._value,this.o))}orElse(i){return this.isNull(this._value)?i:this._value}orElseGet(i){if(!isFunction(i))throw new Error("supplier is not a function");return this.isNull(this._value)?i():this._value}ifPresentOrElse(i,t){if(this.isNull(this._value)){if(!isFunction(t))throw new Error("emptyAction is not a function");t()}else{if(!isFunction(i))throw new Error("action is not a function");i(this._value)}}or(i){if(this.isNull(this._value)){if(!isFunction(i))throw new Error("optionalSupplier is not a function");return i()}return this}}export{Optional};