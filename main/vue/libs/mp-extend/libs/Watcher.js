import equal from"./fast-deep-equal/index";import{isFunction,isString}from"../utils/common";class ValueWatcher{name=null;watching=void 0;current=void 0;prev=void 0;constructor(e){this.name=e}prepare(e){this.watching=e}accept(){return this.prev=this.current,this.current=this.watching,this.watching=void 0,!equal(this.current,this.prev)}get value(){return this.current}get previous(){return this.prev}}class Watcher{watchers=new Map;constructor(e){if(!isString(e))throw new Error(`Try subscribe invalid fields: ${e.toString()}`);e.split(",").forEach(e=>{e=e.trim();return this.watchers.set(e,new ValueWatcher(e))})}prepare(...e){let r;if(1===e.length)r=e[0],r&&Object.keys(r).forEach(e=>{const t=this.watchers.get(e);t&&t.prepare(r[e])});else{var t=e[0],e=e[1];const s=this.watchers.get(t);s&&s.prepare(e)}}accept(t){const e=[...this.watchers.values()];e.some(e=>e.accept())&&isFunction(t)&&(1<e.length?e.map(e=>[e.value,e.previous]):[e[0].value,e[0].previous]).forEach(e=>{t(...e)})}get names(){return[...this.watchers.keys()]}get values(){return[...this.watchers.values()].map(e=>e.value)}}export{Watcher};